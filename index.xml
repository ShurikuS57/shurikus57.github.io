<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://shurikus57.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Sat, 05 May 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://shurikus57.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flutter. Часть 2. Пишем первый экран</title>
      <link>https://shurikus57.github.io/post/2018/05/flutter_authorization/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shurikus57.github.io/post/2018/05/flutter_authorization/</guid>
      
        <description>&lt;p&gt;В &lt;a href=&#34;https://shurikus57.github.io/post/2018/03/setup_flutter/&#34;&gt;предыдущей статье&lt;/a&gt; мы подключили Flutter SDK и создали hello world приложение. Сейчас создадим простое приложение где реализуем экран авторизации, простой механизм валидации логина и пароля и если валидация пройдёт успешно, то осуществить переход на следующий экран:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/05/animation_flutter.gif&#34; alt=&#34;animation_flutter&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Создадим новый проект как было описано в предыдущей статье. Заменим содержимое файл &lt;strong&gt;\lib\main.dart&lt;/strong&gt; на представленный ниже код:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  import &#39;package:flutter/material.dart&#39;;
  
  void main() =&amp;gt; runApp(
        new MyApp(),
      );
  
  class MyApp extends StatelessWidget {
    @override
    Widget build(BuildContext context) {
      return new MaterialApp(home: new Scaffold());
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Как и в Java у Dart есть точка входа с которой начинается запуск программы - это метод &lt;strong&gt;main()&lt;/strong&gt;. Нотация &lt;strong&gt;=&amp;gt;&lt;/strong&gt; предназначена для более наглядного представления вызова функций. Функция &lt;strong&gt;runApp&lt;/strong&gt; предназначена для создания и вывода на экран виджета, который мы создаём и передаём в качестве параметра.&lt;/p&gt;

&lt;p&gt;Класс &lt;strong&gt;MyApp&lt;/strong&gt; наследуется от &lt;strong&gt;StatelessWidget&lt;/strong&gt; тем самым получает свойства неизменяемого виджета. При наследовании нужно переопределить метод создания виджета &lt;strong&gt;build(BuildContext context)&lt;/strong&gt;. &lt;strong&gt;MaterialApp&lt;/strong&gt; - создаёт приложение которое, реализует принципы material design. В качестве маршрута по умолчанию в параметре &lt;strong&gt;home&lt;/strong&gt; передадим класс &lt;strong&gt;Scaffold()&lt;/strong&gt;, который реализует основную структура макета.&lt;/p&gt;

&lt;p&gt;Если запустить этот код, то на экране будет отображён пустой белый экран с пометкой &lt;strong&gt;debug&lt;/strong&gt; в правом верхнем углу:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/05/0.21pttad99gf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь разместим визуальные компоненты на экране. Как мы помним из первой стать во flutter все визуальные компоненты являются виджетами. Благодаря взаимовложенности виджетов друг в друга и строиться графический интерфейс.&lt;/p&gt;

&lt;p&gt;Сейчас у нас есть пустой экран, создадим два поля для ввода текста и кнопку login.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyApp extends StatelessWidget {
  final _sizeTextBlack = const TextStyle(fontSize: 20.0, color: Colors.black);
  final _sizeTextWhite = const TextStyle(fontSize: 20.0, color: Colors.white);

  @override
  Widget build(BuildContext context) {
    return new MaterialApp(
      home: new Scaffold(
        body: new Center(
            child: new Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: &amp;lt;Widget&amp;gt;[
                new Container(
                  child: new TextFormField(
                    decoration: new InputDecoration(labelText: &amp;quot;Email&amp;quot;),
                    keyboardType: TextInputType.emailAddress,
                    style: _sizeTextBlack,
                  ),
                  width: 400.0,
                ),
                new Container(
                  child: new TextFormField(
                    decoration: new InputDecoration(labelText: &amp;quot;Password&amp;quot;),
                    obscureText: true,
                    style: _sizeTextBlack,
                  ),
                  width: 400.0,
                  padding: new EdgeInsets.only(top: 10.0),
                ),
                new Padding(
                  padding: new EdgeInsets.only(top: 25.0),
                  child: new MaterialButton(
                    color: Theme
                        .of(context)
                        .accentColor,
                    height: 50.0,
                    minWidth: 150.0,
                    child: new Text(
                      &amp;quot;LOGIN&amp;quot;,
                      style: _sizeTextWhite,
                    ),
                  ),
                )
              ],
            )
        ),
      ),
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для того что бы выронить все элементы по центру экрана воспользуемся классом &lt;strong&gt;Center&lt;/strong&gt; (строка 9). Для расположения все элементы в один столбец необходимо использовать класс &lt;strong&gt;Column&lt;/strong&gt; в котором для выравнивания дочерних элементов по центру задаём значение параметра &lt;strong&gt;mainAxisAlignment: MainAxisAlignment.center&lt;/strong&gt; (строки 10-11).&lt;/p&gt;

&lt;p&gt;В класс &lt;strong&gt;Column&lt;/strong&gt; можно передать массив виджетов которые будут отображаться внутри него в вертикальном порядке друг под другом (строка 12). Каждое полу ввода нужно ограничить по ширине, поэтому необходимо &amp;ldquo;завернуть&amp;rdquo; всё это в ещё один класс &lt;strong&gt;Container&lt;/strong&gt;. У которого уже можно задать нужный параметр width (строка 19). В качестве параметров стиля для текста создадим две переменные &lt;strong&gt;_sizeTextBlack&lt;/strong&gt; и &lt;strong&gt;_sizeTextWhite&lt;/strong&gt; (строки 2-3).&lt;/p&gt;

&lt;p&gt;Для поля ввода Email зададим параметр типа клавиатуры &lt;strong&gt;TextInputType.emailAddress&lt;/strong&gt;, а для поля пароля выставим &lt;strong&gt;obscureText&lt;/strong&gt; в &lt;strong&gt;true&lt;/strong&gt; (строка 16 и 24).&lt;/p&gt;

&lt;p&gt;Для отображение кнопки нам понадобиться отступ который мы сможем задать через класс &lt;strong&gt;Padding&lt;/strong&gt; (строка 30).&lt;/p&gt;

&lt;p&gt;В итоге у нас получиться следующий результат:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/05/0.kpqyaj9z6j.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Далее реализуем простую логику валидации почты и пароля. Для хранения и передачи данных создадим в классе &lt;strong&gt;MyApp&lt;/strong&gt; две переменные &lt;strong&gt;_email&lt;/strong&gt; и &lt;strong&gt;_password&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyApp extends StatelessWidget {
    String _email;
    String _password;
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;У виджета &lt;strong&gt;TextFormField&lt;/strong&gt; есть метод &lt;strong&gt;onSaved&lt;/strong&gt; который возвращает значение поля ввода при изменениях. Это значение сохраняем в переменные &lt;strong&gt;_email&lt;/strong&gt; и &lt;strong&gt;_password&lt;/strong&gt; соответственно. Так же есть функция &lt;strong&gt;validator&lt;/strong&gt; в которой можно реализовать логику отображения подсказки в случае если валидация не пройдена.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;child: new TextFormField(
  ...
  onSaved: (val) =&amp;gt; _email = val,
  validator: (val) =&amp;gt;
      !val.contains(&amp;quot;@&amp;quot;) ? &#39;Not a valid email.&#39; : null,
      ...
),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Обработаем событие нажатие на кнопку. В виджет &lt;strong&gt;MaterialButton&lt;/strong&gt; есть функция &lt;strong&gt;onPressed&lt;/strong&gt; который вызывается после нажатие кнопки. Для лаконичности кода вынесем обработку нажатия в отдельный метод &lt;strong&gt;submit&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;child: new MaterialButton(
  onPressed: submit,
  ...
),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для того что бы провалидировать сразу все поля нужно создать дополнительный виджет &lt;strong&gt;Form&lt;/strong&gt;. У него есть тип &lt;strong&gt;key&lt;/strong&gt;, который создаёт контейнер для полей формы. Его будем хранить в поле &lt;strong&gt;formKey&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyApp extends StatelessWidget {
  ...
  final formKey = new GlobalKey&amp;lt;FormState&amp;gt;();
  
  ...
  body: new Center(
          child: new Form(
              key: formKey,
              child: new Column(
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Реализуем метод &lt;strong&gt;submit()&lt;/strong&gt;. В нём выполняется получение полей ввода и вызова метода &lt;strong&gt;validate()&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void submit() {
    final form = formKey.currentState;
    if (form.validate()) {
      form.save();
      performLogin();
    }
  }

  void performLogin() {
    hideKeyboard();
    Navigator.push(
        _context,
        new MaterialPageRoute(
            builder: (context) =&amp;gt; new SecondScreen(_email, _password)));
  }

  void hideKeyboard() {
    SystemChannels.textInput.invokeMethod(&#39;TextInput.hide&#39;);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После успешной валидации скрываем клавиатуру и открываем экран в который передадим значение логина и пароля:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/05/0.yfwksc1ktbs.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Весь код проекта можно посмотреть по &lt;a href=&#34;https://github.com/ShurikuS57/flutter_authorization_example&#34;&gt;ссылке&lt;/a&gt;.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Использование Lint в Android Studio для проверки своего кода</title>
      <link>https://shurikus57.github.io/post/2018/04/lint_in_android_studio/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shurikus57.github.io/post/2018/04/lint_in_android_studio/</guid>
      
        <description>&lt;p&gt;На практике в коде очень часто можно встретить очевидные ошибки, спустя какое-то время. Это может происходить из-за невнимательности при написании кода. Что бы свести такие ошибки к минимуму могут помочь статические анализаторы кода. Одним из таких анализаторов является &lt;strong&gt;Lint&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lint&lt;/strong&gt; - это статический анализатор кода, который сообщает о подозрительных или критических выражениях в коде. По факту это слово стало нарицательным и им называют анализаторы, которые сканируют код на наличие ошибок.&lt;/p&gt;

&lt;p&gt;В Android Studio уже есть встроенные анализаторы кода, который дают подсказки &amp;ldquo;налету&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/04/0.vk0sxuun7g.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Однако подсказки подсвечивают ошибки достаточно ненавязчиво и поэтому их легко пропустить. Но можно запустить проверку несколькими способами.&lt;/p&gt;

&lt;h2 id=&#34;способы-запуска-lint&#34;&gt;Способы запуска Lint.&lt;/h2&gt;

&lt;h3 id=&#34;запуск-через-меню-в-android-studio&#34;&gt;Запуск через меню в Android Studio&lt;/h3&gt;

&lt;p&gt;Самый простой и удобный способ запуска проверки - это через Android Studio. Для этого в меню необходимо выбрать пункты &lt;strong&gt;Analyze -&amp;gt; Inspect Code&lt;/strong&gt;. В появившемся окне можно ограничить область сканирования кода. Можно проверить весь проект, определённый модуль или отдельный взятый класс. На мой взгляд самый полезных из пунктов - это проверка не закоммиченых файлов. Так же можно выбрать профиль с набором правил для проверки.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/04/0.1dbij1b5zx3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;После выбора настроек можно начать проверку по нажатию на кнопку &lt;strong&gt;Ок&lt;/strong&gt;. Когда проверка закончиться то появиться окно в котором все ошибки, и предупреждения будут выведены в специальном окне. Все замечания удобно собраны по типам с кратким описание причины и решением проблемы.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/04/0.vd7ze705hrr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;запуск-через-командную-строку&#34;&gt;Запуск через командную строку&lt;/h3&gt;

&lt;p&gt;Так же проверку можно запустить через gradle выполнив в консоли команду:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./gradlew lint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После проверки сформируется отчёт в формате html, который можно посмотреть по следующему пути:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/путь_к_проекту/app/build/reports/lint-results.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/04/0.kwp4i9sqfib.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Этот способ менее удобный чем первый, так как отчёт формируется в отрыве от студии и для правки ошибок нужно постоянно переключаться между отчётом и IDE. Зато этот способ прекрасно подходит для случаев если проверку осуществляется на сервере, а в случае обнаружение ошибок, прикреплять файл с отчётом к письму.&lt;/p&gt;

&lt;h3 id=&#34;запуск-при-сборке-проекта&#34;&gt;Запуск при сборке проекта.&lt;/h3&gt;

&lt;p&gt;Можно автоматизировать запуск проверки &lt;strong&gt;lint&lt;/strong&gt;, который будет осуществлять при каждой сборке проекта. Для этого необходимо зайти в настройки запуска проекта:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/04/0.g9ehbhbsyy6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Добавить следующую строку:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:app:check
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/04/0.9uluolx5moh.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/04/0.9djeakj61z5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Этот способ менее предпочтительный так как значительно замедлит скорость сборки и разработки.&lt;/p&gt;

&lt;h3 id=&#34;настройка-gradle-сборки&#34;&gt;Настройка gradle сборки&lt;/h3&gt;

&lt;p&gt;Так же lint проверку можно настроить в gradle файле.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lintOptions {
    abortOnError false
    warningsAsErrors true
    lintConfig file(&#39;./code_quality_tools/lint.xml&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;abortOnError&lt;/strong&gt;: В случае обнаружение ошибки прекращается проверка.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;warningsAsErrors&lt;/strong&gt;: определяет предупреждения как ошибки.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lintConfig&lt;/strong&gt;: путь к файлу проекта с настройками lint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Если опция &lt;strong&gt;abortOnError&lt;/strong&gt; включена, то при запуске сборки через gradle в случае обнаружении ошибки произойдёт исключение:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/04/0.qudg0ahc9gf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;настройка-правил-проверки-lint&#34;&gt;Настройка правил проверки lint&lt;/h2&gt;

&lt;p&gt;Отредактировать правила lint можно в настройках Android studio. Там же можно сделать отдельный конфигурационный профиль и использовать его.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/04/0.kjxqrx82l1q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;отключение-проверки-lint-с-помощью-анотаций-в-коде&#34;&gt;Отключение проверки Lint с помощью анотаций в коде&lt;/h2&gt;

&lt;p&gt;Иногда бывают исключения, и может сложиться ситуация что необходимо отключить проверку какого-либо правила проверки для класса или метода. В Java коде это делается через аннотацию &lt;strong&gt;@SuppressLint(&amp;ldquo;NewApi&amp;rdquo;)&lt;/strong&gt;. В качестве параметра принимает строку названия проверки которую нужно исключить. Если нужно исключить все правила, то можно использовать следующую аннотацию:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@SuppressLint(&amp;quot;all&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Так же проверку можно обойти в xml файлах с помощью аттрибута &lt;strong&gt;tools:ignore=&amp;ldquo;NewApi,StringFormatInvalid&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;

&lt;p&gt;В данной статье мы рассмотрели основные способы запуска проверки кода. Lint очень полезный инструмент для контроля за качеством кода, которым можно и нужно пользоваться.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Flutter часть 1. Установка и настройка</title>
      <link>https://shurikus57.github.io/post/2018/03/setup_flutter/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shurikus57.github.io/post/2018/03/setup_flutter/</guid>
      
        <description>&lt;p&gt;Недавно google &lt;a href=&#34;https://developers.googleblog.com/2018/02/announcing-flutter-beta-1.html&#34;&gt;анонсировал&lt;/a&gt; beta версию Flutter. &lt;strong&gt;Flutter&lt;/strong&gt; - это новый кроссплатформенный UI framework, который включает в себе набор инструментов: движок для 2D рендеринга, готовый набор UI компонентов и набор инструментов для разработки. Он позволяет писать кроссплатформенные приложения с общей кодовой базой.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Flutter состоит из трёх компонентов:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flutter engine.&lt;/li&gt;
&lt;li&gt;Foundation library.&lt;/li&gt;
&lt;li&gt;Design-specific widgets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Flutter engine&lt;/strong&gt; - написан на C++, предоставляет низкоуровневую поддержку рендеринга, использует для этого графическую библиотеку &lt;a href=&#34;https://skia.org/&#34;&gt;Skia&lt;/a&gt;. Skia - это 2D графическая библиотека, с открытым исходным кодом, которая предоставляет кроссплатформенное API. Она служит графическим движком для Google Chrome, Chrome OS, Android, Mozilla Firefox, Firefox OS и т.д. На официальном сайте есть примеры, которые запускаются сразу из браузера.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Foundation library&lt;/strong&gt; - включает в себя базовые классы и функции, которые используются для создания приложения с использованием Flutter. Данная библиотека написана уже на языке Dart.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design-specific widgets&lt;/strong&gt; - это набор уже готовых базовых графических компонентов для построения пользовательского интерфейса. Данный набор состоит из двух крупных наборов компонентов:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Material Design widgets - графические компоненты реализующие спецификацию material design.&lt;/li&gt;
&lt;li&gt;Cupertino widgets - набор реализующий Apple iOS дизайн.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;особености-flutter&#34;&gt;Особености Flutter&lt;/h2&gt;

&lt;h3 id=&#34;всё-есть-виджет&#34;&gt;Всё есть виджет&lt;/h3&gt;

&lt;p&gt;Виджет представляет собой строительный блок для построения пользовательского интерфейса, который по сути является согласованной унифицированной моделью.&lt;/p&gt;

&lt;p&gt;С помощью виджета можно определить:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;структурные элементы, например кнопки или меню&lt;/li&gt;
&lt;li&gt;стилистические элементы, например шрифты или цветовую схему&lt;/li&gt;
&lt;li&gt;разметку макета, например отступы.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Виджеты выстраиваются в иерархию с помощью композиции. Каждый виджет находиться внутри другого виджета и наследует его свойства. Характерной особенностью является то что корневой виджет выполняет роль application.&lt;/p&gt;

&lt;p&gt;Так же виджет позволяет получать и обрабатывать события и заменять виджеты в иерархии динамически.&lt;/p&gt;

&lt;h3 id=&#34;иерархия-слоёв&#34;&gt;Иерархия слоёв&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/0.93afm246wlf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/0.wvfheeqihrs.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;установка-flutter&#34;&gt;Установка Flutter&lt;/h2&gt;

&lt;p&gt;Что бы попробовать Flutter в деле необходимо клонировать репозиторий с GitHub из ветки beta с помощью команды:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone -b beta https://github.com/flutter/flutter.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Далее нужно добавить переменные окружения PATH. Для этого в конец файла &lt;strong&gt;~/.bashrc&lt;/strong&gt; нужно добавить следующие строки:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=&amp;lt;путь к каталогу&amp;gt;/flutter/bin:$PATH
export ANDROID_HOME=/&amp;lt;путь к каталогу&amp;gt;/android-sdk-linux
export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Где в первой строке необходимо указать путь к каталогу с исполняемым файлом &lt;strong&gt;flutter&lt;/strong&gt;, который находиться в каталоге &lt;strong&gt;/bin&lt;/strong&gt;. Во второй строке нужно добавить путь к Android SDK.&lt;/p&gt;

&lt;p&gt;Следующая команда проверит и при необходимости закачает все зависимости, которые нужны для Flutter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ flutter doctor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После того как все необходимое будут закачено, в терминале будет выведена следующая информация:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ flutter doctor
Doctor summary (to see all details, run flutter doctor -v):
[✓] Flutter (Channel beta, v0.1.5, on Linux, locale en_US.UTF-8)
[✓] Android toolchain - develop for Android devices (Android SDK 27.0.3)
[✓] Android Studio (version 3.0)
[✓] Connected devices (1 available)

• No issues found!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C помощью команды &lt;strong&gt;flutter devices&lt;/strong&gt; можно увидеть список подключённых устройств. В моём случае это эмулятор:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ flutter devices
1 connected device:

Android SDK built for x86 • emulator-5554 • android-x86 • Android 8.1.0 (API 27) (emulator)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;установка-плагинов-в-android-studio-flutter-и-dart&#34;&gt;Установка плагинов в Android studio (Flutter и Dart)&lt;/h2&gt;

&lt;p&gt;Для поддержки Flutter в Android Studio необходимо установить плагин &lt;strong&gt;Flutter&lt;/strong&gt; из репозитория. Для этого на экране приветствия нужно выбрать пункт меню &lt;strong&gt;Configure | Plugins&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/install_plugins_001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;В окне &lt;strong&gt;Plugins&lt;/strong&gt; нужно выбрать кнопку &lt;strong&gt;Browse repositories&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/install_plugins_002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;В строке поиска вбиваем название плагина &lt;strong&gt;Flutter&lt;/strong&gt; и выбираем кнопку &lt;strong&gt;Install&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/install_plugins_003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Если ранее не был установлен плагин &lt;strong&gt;Dart&lt;/strong&gt;, то появиться диалоговое окно, где предложат это сделать. Соглашаемся с установкой.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/install_plugins_004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;После установки плагина необходимо перезапустить Android Studio. После этого в основном меню появиться новый пункт &lt;strong&gt;Start a new Flutter project&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/install_plugins_005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;создание-нового-проекта&#34;&gt;Создание нового проекта&lt;/h2&gt;

&lt;p&gt;После установки плагинов в основном меню Android Studio выбираем пункт &lt;strong&gt;Start a new Flutter project&lt;/strong&gt;. После выбора пункта запуститься мастер создания проекта:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/create_new_flutter_project_001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Выбираем пункт &lt;strong&gt;Flutter Application&lt;/strong&gt;. Далее нажимаем на кнопку &lt;strong&gt;Next&lt;/strong&gt; и переходим к следующему шагу:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/create_new_flutter_project_002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Здесь необходимо указать путь к &lt;strong&gt;Flutter SDK&lt;/strong&gt;, который был закачен ранее. Нажимаем на кнопку &lt;strong&gt;Next&lt;/strong&gt;. На следующем завершающем шаге нажимаем кнопку &lt;strong&gt;Finish&lt;/strong&gt;. После этого сгенерируется Flutter проект.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/create_new_flutter_project_003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Запустим эмулятор, и произведём запуск приложения. Нужно перейти в корневой каталог проекта и выполнить команду:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ flutter run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После компиляции приложение запуститься на устройстве:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2018/03/create_new_flutter_project_005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;В следующей статье создадим свой собственный экран из готовых компонентов Flutter.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Работа с Android Runtime Permissions</title>
      <link>https://shurikus57.github.io/post/2017/03/introduce_android_permissions/</link>
      <pubDate>Fri, 24 Mar 2017 01:07:02 +0300</pubDate>
      
      <guid>https://shurikus57.github.io/post/2017/03/introduce_android_permissions/</guid>
      
        <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;

&lt;p&gt;SDK android дает богатые возможности для работы с телефоном. Есть возможность получать фотографии, отслеживать перемещения телефона, записывать звук с микрофона, перехватывать sms и т.д. Перечисленные возможности попадают под категорию конфиденциальные. К сожалению, до недавнего времени, единственный способ узнать какие разрешения будет использовать приложение, можно было увидеть только в диалоговом окне при установке приложения. На практике, данный подход оказался неэффективен, т.к. пользователь обычно не читает и автоматически соглашается с установкой. В результате в google play появилась куча приложений типа “Фонарик”, которые получали доступ к разрешениям которые совершенно не нужных для выполнения своих задач.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2017/03/Flashlight-Permissions-Comapred.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;С выходом android 6 (API level 23) ситуация изменилась. Появились разрешения, которые необходимо принимать при работе приложения. Работает это точно так же как и в iOS. При запуске приложения появляется системный диалог, который и предлагает пользователю разрешить или запретить доступ приложения к разрешению.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2017/03/b84e66bbf0f4d751f5febc51742e3ca4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;виды-permissions&#34;&gt;Виды Permissions&lt;/h2&gt;

&lt;p&gt;Теперь разрешения разделены на два типа:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;обычные (normal);&lt;/li&gt;
&lt;li&gt;опасные (dangerous&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Обычные разрешения - это группа разрешений, которые не связаны с приватными данными. Они описываться в &lt;strong&gt;manifest.xml&lt;/strong&gt; и принимаются пользователем автоматически при установки приложения. Опасные разрешения - дают доступ к приватным данным пользователя.&lt;/p&gt;

&lt;p&gt;Список опасных разрешений:&lt;/p&gt;

&lt;p&gt;READ_CALENDAR&lt;/p&gt;

&lt;p&gt;WRITE_CALENDAR&lt;/p&gt;

&lt;p&gt;CAMERA&lt;/p&gt;

&lt;p&gt;READ_CONTACTS&lt;/p&gt;

&lt;p&gt;WRITE_CONTACTS&lt;/p&gt;

&lt;p&gt;GET_ACCOUNTS&lt;/p&gt;

&lt;p&gt;ACCESSFINELOCATION&lt;/p&gt;

&lt;p&gt;ACCESSCOARSELOCATION&lt;/p&gt;

&lt;p&gt;RECORD_AUDIO&lt;/p&gt;

&lt;p&gt;READPHONESTATE&lt;/p&gt;

&lt;p&gt;CALL_PHONE&lt;/p&gt;

&lt;p&gt;READCALLLOG&lt;/p&gt;

&lt;p&gt;WRITECALLLOG&lt;/p&gt;

&lt;p&gt;ADD_VOICEMAIL&lt;/p&gt;

&lt;p&gt;USE_SIP&lt;/p&gt;

&lt;p&gt;PROCESSOUTGOINGCALLS&lt;/p&gt;

&lt;p&gt;BODY_SENSORS&lt;/p&gt;

&lt;p&gt;SEND_SMS&lt;/p&gt;

&lt;p&gt;RECEIVE_SMS&lt;/p&gt;

&lt;p&gt;READ_SMS&lt;/p&gt;

&lt;p&gt;RECEIVEWAPPUSH&lt;/p&gt;

&lt;p&gt;RECEIVE_MMS&lt;/p&gt;

&lt;p&gt;READEXTERNALSTORAGE&lt;/p&gt;

&lt;p&gt;WRITEEXTERNALSTORAGE&lt;/p&gt;

&lt;p&gt;С версии android API level 23, необходимо обязательно запрашивать разрешение у пользователя, иначе приложение упадет с исключением:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2017/03/pasted image 0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Также у пользователя появилась возможность в любой момент можно дать или запретить разрешение. Для этого в настройках приложения появился новый пункт меню “Разрешения”.&lt;/p&gt;

&lt;h2 id=&#34;когда-следует-запрашивать-разрешения&#34;&gt;Когда следует запрашивать разрешения&lt;/h2&gt;

&lt;p&gt;Базовые разрешения, без которых приложение не сможет запуститься следует запрашивать при старте приложения. Остальные разрешения следует запрашивать только перед непосредственным использованием.&lt;/p&gt;

&lt;h2 id=&#34;постановка-задачи&#34;&gt;Постановка задачи&lt;/h2&gt;

&lt;p&gt;Создадим простое приложение, которое по нажатию на кнопку будет выводить список имён из адресной книги телефона.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shurikus57.github.io/2017/03/Android Emulator - Nexus_4_API_25_5556_002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;создание-проекта&#34;&gt;Создание проекта&lt;/h2&gt;

&lt;p&gt;Создадим новый проект с &lt;strong&gt;Empty Activity&lt;/strong&gt;. В &lt;strong&gt;activity_main.xml&lt;/strong&gt; создадим одну кнопку и ListView.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/btn_permission_read_contacts&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/text_read_contacts&amp;quot;/&amp;gt;

    &amp;lt;ListView
        android:id=&amp;quot;@+id/list_contacts&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;match_parent&amp;quot;/&amp;gt;

&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Добавим строковый ресурсы в &lt;strong&gt;strings.xml&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;string name=&amp;quot;text_read_contacts&amp;quot;&amp;gt;Read contacts&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;А также добавим разрешение в &lt;strong&gt;manifest.xml&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_CONTACTS&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Инициализируем view компоненты и повесим обработчик нажатия на кнопку.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static final int MY_PERMISSIONS_REQUEST_READ_CONTACTS = 1234;
private ListView mListContacts;

@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button buttonReadContacts = (Button) findViewById(R.id.btn_permission_read_contacts);
        mListContacts = (ListView) findViewById(R.id.list_contacts);

        buttonReadContacts.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getContacts();
            }
        });
    }

public void getContacts(){
        //Проверяем есть ли у нас разрешение на чтение контактов
        if (ContextCompat.checkSelfPermission(this,
                Manifest.permission.READ_CONTACTS)
                != PackageManager.PERMISSION_GRANTED) {

            if (ActivityCompat.shouldShowRequestPermissionRationale(this,
                    Manifest.permission.READ_CONTACTS)) {
                //Здесь выводим сообщение в котором поясняем почему необходимы разрешение
                Toast.makeText(this,&amp;quot;Need for show contacts. Please turn on permission at [Setting]&amp;gt;[Permission]&amp;quot;, Toast.LENGTH_SHORT).show();
            } else {
                //Запрашиваем разрешение
                ActivityCompat.requestPermissions(this,
                new String[]{Manifest.permission.READ_CONTACTS},
                MY_PERMISSIONS_REQUEST_READ_CONTACTS);
            }
            return;
        }

        Cursor phones = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null, null, null);
        if(phones == null){
            return;
        }

        List&amp;lt;String&amp;gt; nameList = new ArrayList&amp;lt;&amp;gt;();
        while (phones.moveToNext()) {
            String user = &amp;quot;&amp;quot;;
            user = phones.getString(phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
            nameList.add(user);
        }
        phones.close();

        ArrayAdapter&amp;lt;String&amp;gt; adapter = new ArrayAdapter&amp;lt;&amp;gt;(getApplicationContext(), android.R.layout.simple_list_item_1
, android.R.id.text1, nameList);
        mListContacts.setAdapter(adapter);

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Обработать результат запроса разрешения следует в &lt;strong&gt;onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)&lt;/strong&gt;, где &lt;strong&gt;requestCode&lt;/strong&gt; есть id который был передан в &lt;strong&gt;ActivityCompat.requestPermissions()&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST_READ_CONTACTS: {
                if (grantResults.length &amp;gt; 0
                        &amp;amp;&amp;amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    //Здесь мы получаем разрешение и снова вызываем getContacts()
                    getContacts();
                } else {
                    Toast.makeText(this, &amp;quot;Read contacts permission is denied.&amp;quot;, Toast.LENGTH_SHORT).show();
                }
                return;
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;

&lt;p&gt;Android Runtime Permissions в первую очередь направленно на улучшение безопасности персональных данных и привлечения внимания пользователя к разрешениям, которые использует приложение.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ShurikuS57/Android-Runtime-Permission-Tutorial&#34;&gt;Ссылка на GitHub репозиторий.&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Как в Android получить данные из local.properties?</title>
      <link>https://shurikus57.github.io/post/2017/03/load-data-from-local.properties/</link>
      <pubDate>Fri, 10 Mar 2017 01:07:02 +0300</pubDate>
      
      <guid>https://shurikus57.github.io/post/2017/03/load-data-from-local.properties/</guid>
      
        <description>&lt;p&gt;Выкладывая код в публичный доступ, например на github, необходимо позаботится о том чтобы случайно не выложить важную информацию, например ключи доступа к серверу. Для этих целей прекрасно подойдёт файл &lt;strong&gt;local.properties&lt;/strong&gt;. При создании проекта в Android Studio, этот файл уже указан в &lt;strong&gt;.gitignore&lt;/strong&gt;, поэтому не будет отслеживаться системой CVS.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Что бы его использовать, необходимо, добавить переменную в файл проекта &lt;strong&gt;local.properties&lt;/strong&gt;, например:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;api.key = &amp;quot;04e0f542ya38a58461a44fbd11a89530&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В файле &lt;strong&gt;build.gradle&lt;/strong&gt;, который находится в директории проекта, в конце блока &lt;strong&gt;defaultConfig {}&lt;/strong&gt;, добавляем следующие строки:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defaultConfig {
....

Properties properties = new Properties()
properties.load(project.rootProject.file(&#39;local.properties&#39;).newDataInputStream())
def apiKey = properties.getProperty(&#39;api.key&#39;)
resValue &amp;quot;string&amp;quot;, &amp;quot;API_KEY&amp;quot;, apiKey
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В этом блоке загружается &lt;strong&gt;local.properties&lt;/strong&gt; из корневого каталога модуля и добавляем полученное значение в ресурсы. Из ресурсов получаем значение привычным способом, через метод &lt;strong&gt;getString()&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getString(R.string.API_KEY);
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
  </channel>
</rss>